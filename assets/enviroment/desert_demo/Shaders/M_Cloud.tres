[gd_resource type="VisualShader" load_steps=12 format=3 uid="uid://0wrox13ywyfl"]

[ext_resource type="Texture2D" uid="uid://nprprtx4omy6" path="res://assets/enviroment/desert_demo/Biomes/PNB_Core/Textures/T_Noise_Big_02.png" id="1_3jscw"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_di66svhuguyrn"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1)]
operator = 2

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_cfq84gutmmklw"]

[sub_resource type="VisualShaderNodeVec4Parameter" id="VisualShaderNodeVec4Parameter_gsj3sbps1lhu"]
expanded_output_ports = [0]
parameter_name = "Param"
default_value_enabled = true
default_value = Vector4(0.887923, 0.552011, 0.450786, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_c23v8gywa51iw"]
expanded_output_ports = [0]
texture = ExtResource("1_3jscw")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_di6pgwbbvoewx"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1)]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_j06r086olf4"]
constant = 0.35

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bqg5ia5m1wex6"]
parameter_name = "Metallic"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bqf6o83sqf1u5"]
parameter_name = "Roughness"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bqhkdwfovw71k"]
parameter_name = "Specular"
default_value_enabled = true

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_dj7cgiw212k3s"]
size = Vector2(940, 380)
expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx, depth_prepass_alpha;

uniform vec4 Param = vec4(0.887923, 0.552011, 0.450786, 1.000000);
uniform sampler2D tex_frg_4;
uniform float Metallic = 0.0;
uniform float Roughness = 1.0;
uniform float Specular = 0.0;


// GlobalExpression:0
	//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
	float saturate(float val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 saturate2(vec2 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec3 saturate3(vec3 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 mul( mat2 mat, vec2 vector )
	{
		return mat * vector;
	}
	float rcp(float val)
	{
		return 1.0 / val;
	}
	void sincos( float x, out float s, out float c )
	{
		s = sin(x);
		c = cos(x);
	}
	vec2 UnitVectorToOctahedron( vec3 Nparam )
	{
	Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
	if( Nparam.z <= 0.0 )
	{
		vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
	}
	return Nparam.xy;
	}
	vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
	{
	vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	vec3 UAxis = Position - ClosestPointOnAxis;
	vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
	vec3 R = UAxis * CosAngle + VAxis * SinAngle;
	vec3 RotatedPosition = ClosestPointOnAxis + R;
	return RotatedPosition - Position;
	}
	vec3 hash_noise_range_UTG( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
	}
	

void fragment() {
// Vector4Parameter:3
	vec4 n_out3p0 = Param;


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);
	float n_out4p4 = n_out4p0.a;


// VectorOp:2
	vec3 n_out2p0 = vec3(n_out3p0.xyz) * vec3(n_out4p0.xyz);


// FloatConstant:6
	float n_out6p0 = 0.350000;


// VectorOp:5
	vec3 n_out5p0 = vec3(n_out4p4) * vec3(n_out6p0);


// FloatParameter:7
	float n_out7p0 = Metallic;


// FloatParameter:8
	float n_out8p0 = Roughness;


// FloatParameter:9
	float n_out9p0 = Specular;


// Clamp:22
	float n_in22p1 = 0.00000;
	float n_in22p2 = 1.00000;
	float n_out22p0 = clamp(n_out9p0, n_in22p1, n_in22p2);


// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out5p0.x;
	METALLIC = n_out7p0;
	ROUGHNESS = n_out8p0;
	SPECULAR = n_out22p0;


}
"
graph_offset = Vector2(-523.783, 120.943)
modes/cull = 2
flags/depth_prepass_alpha = true
nodes/vertex/0/position = Vector2(752, 0)
nodes/vertex/23/node = SubResource("VisualShaderNodeGlobalExpression_dj7cgiw212k3s")
nodes/vertex/23/position = Vector2(264, 288)
nodes/vertex/23/size = Vector2(940, 380)
nodes/vertex/23/input_ports = ""
nodes/vertex/23/output_ports = ""
nodes/vertex/23/expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"
nodes/fragment/0/position = Vector2(752, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeVectorOp_di66svhuguyrn")
nodes/fragment/2/position = Vector2(6, 79)
nodes/fragment/3/node = SubResource("VisualShaderNodeVec4Parameter_gsj3sbps1lhu")
nodes/fragment/3/position = Vector2(-345, -19)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_c23v8gywa51iw")
nodes/fragment/4/position = Vector2(-345, 249)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorOp_di6pgwbbvoewx")
nodes/fragment/5/position = Vector2(115, 307)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatConstant_j06r086olf4")
nodes/fragment/6/position = Vector2(-114, 590)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatParameter_bqg5ia5m1wex6")
nodes/fragment/7/position = Vector2(225, -19)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatParameter_bqf6o83sqf1u5")
nodes/fragment/8/position = Vector2(153, 172)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_bqhkdwfovw71k")
nodes/fragment/9/position = Vector2(172, 57)
nodes/fragment/22/node = SubResource("VisualShaderNodeClamp_cfq84gutmmklw")
nodes/fragment/22/position = Vector2(-240, 0)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 0, 1, 4, 4, 5, 0, 6, 0, 5, 1, 7, 0, 0, 2, 8, 0, 0, 3, 9, 0, 22, 0, 22, 0, 0, 4)
