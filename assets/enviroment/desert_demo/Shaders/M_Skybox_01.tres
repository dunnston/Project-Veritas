[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://bnswlgf84d0cg"]

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_o3tcxjnb4o5e"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_cks7h008urdnh"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_dc6jxkmpss5vc"]
expanded_output_ports = [0]
constant = Vector3(0.01033, 0, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_dc52llf58mk1m"]
expanded_output_ports = [0]
constant = Vector3(0.57758, 0.08022, 0.045186)

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_c0k0k78yh77i6"]
size = Vector2(980, 340)
expression = "//ComponentMask:5(LinearGradient)
output0 =  input0.r;
"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_w71bcumaa581"]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_c0qjlfmvetwor"]
size = Vector2(980, 340)
expression = "//ComponentMask:7(LinearGradient)
output0 =  input0.g;
"

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_cagktle1ty4yu"]
size = Vector2(940, 380)
expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx, depth_prepass_alpha;



// GlobalExpression:0
	//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
	float saturate(float val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 saturate2(vec2 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec3 saturate3(vec3 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 mul( mat2 mat, vec2 vector )
	{
		return mat * vector;
	}
	float rcp(float val)
	{
		return 1.0 / val;
	}
	void sincos( float x, out float s, out float c )
	{
		s = sin(x);
		c = cos(x);
	}
	vec2 UnitVectorToOctahedron( vec3 Nparam )
	{
	Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
	if( Nparam.z <= 0.0 )
	{
		vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
	}
	return Nparam.xy;
	}
	vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
	{
	vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	vec3 UAxis = Position - ClosestPointOnAxis;
	vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
	vec3 R = UAxis * CosAngle + VAxis * SinAngle;
	vec3 RotatedPosition = ClosestPointOnAxis + R;
	return RotatedPosition - Position;
	}
	vec3 hash_noise_range_UTG( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
	}
	

void fragment() {
// Vector3Constant:19
	vec3 n_out19p0 = vec3(0.000000, 0.000000, 0.000000);


// Vector3Constant:3
	vec3 n_out3p0 = vec3(0.010330, 0.000000, 0.000000);


// Vector3Constant:4
	vec3 n_out4p0 = vec3(0.577580, 0.080220, 0.045186);


// Input:6
	vec2 n_out6p0 = UV;


	float n_out7p0;
// Expression:7
	n_out7p0 = 0.0;
	{
		//ComponentMask:7(LinearGradient)
		n_out7p0 =  vec4(n_out6p0, 0.0, 0.0).g;
		
	}


// Mix:2
	vec3 n_out2p0 = mix(n_out3p0, n_out4p0, vec3(n_out7p0));


// Output:0
	ALBEDO = n_out19p0;
	EMISSION = n_out2p0;


}
"
graph_offset = Vector2(-523.783, 120.943)
modes/cull = 2
flags/depth_prepass_alpha = true
nodes/vertex/0/position = Vector2(-240, 0)
nodes/vertex/18/node = SubResource("VisualShaderNodeGlobalExpression_cagktle1ty4yu")
nodes/vertex/18/position = Vector2(264, 288)
nodes/vertex/18/size = Vector2(940, 380)
nodes/vertex/18/input_ports = ""
nodes/vertex/18/output_ports = ""
nodes/vertex/18/expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"
nodes/fragment/0/position = Vector2(-240, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeMix_cks7h008urdnh")
nodes/fragment/2/position = Vector2(-537, 192)
nodes/fragment/3/node = SubResource("VisualShaderNodeVec3Constant_dc6jxkmpss5vc")
nodes/fragment/3/position = Vector2(-787, -19)
nodes/fragment/4/node = SubResource("VisualShaderNodeVec3Constant_dc52llf58mk1m")
nodes/fragment/4/position = Vector2(-787, 172)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_c0k0k78yh77i6")
nodes/fragment/5/position = Vector2(-985, -200)
nodes/fragment/5/size = Vector2(980, 340)
nodes/fragment/5/input_ports = "0,5,input0;"
nodes/fragment/5/output_ports = "0,0,output0;"
nodes/fragment/5/expression = "//ComponentMask:5(LinearGradient)
output0 =  input0.r;
"
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_w71bcumaa581")
nodes/fragment/6/position = Vector2(-1753, -218)
nodes/fragment/7/node = SubResource("VisualShaderNodeExpression_c0qjlfmvetwor")
nodes/fragment/7/position = Vector2(-996, -2)
nodes/fragment/7/size = Vector2(980, 340)
nodes/fragment/7/input_ports = "0,5,input0;"
nodes/fragment/7/output_ports = "0,0,output0;"
nodes/fragment/7/expression = "//ComponentMask:7(LinearGradient)
output0 =  input0.g;
"
nodes/fragment/19/node = SubResource("VisualShaderNodeVec3Constant_o3tcxjnb4o5e")
nodes/fragment/19/position = Vector2(-480, 0)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 5, 3, 0, 2, 0, 4, 0, 2, 1, 7, 0, 2, 2, 6, 0, 7, 0, 19, 0, 0, 0)
