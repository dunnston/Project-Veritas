[gd_resource type="VisualShader" load_steps=12 format=3 uid="uid://b5g1detoj0u5g"]

[ext_resource type="Texture2D" uid="uid://xcfudhj3e15g" path="res://assets/enviroment/desert/Biomes/PNB_Core/Textures/T_Grass_01.png" id="1_jsa4t"]

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_dbqdc4krgj0h3"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0.5, 0.5, 0.5), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_c23v674ffjdka"]
expanded_output_ports = [0]
texture = ExtResource("1_jsa4t")
texture_type = 1

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_dnfvlm0c7lp6p"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_dqoa8qbtma37e"]
constant = 0.3333

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_c24eiygg33agc"]
size = Vector2(980, 1250)
expression = "//NormalTexture:3(null)
vec4 Normal3 = texture( input2, UV );
Normal3 = Normal3 * vec4(2, 2, 2, 2) - vec4(1, 1, 1, 1);
output0 = Normal3.xyz;
output1 = Normal3.x;
output2 = Normal3.y;
output3 = Normal3.z;
output3 = Normal3.w;
output5 = Normal3;
"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_c24eidipoafx0"]
parameter_name = "Generated_T_Grass_01_Normals"
texture_type = 2
texture_filter = 6

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bqg5elj5f0d28"]
parameter_name = "Metallic"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bqf6n08busdwi"]
parameter_name = "Roughness"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bqhkcoj61bj2w"]
parameter_name = "Specular"
default_value_enabled = true

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_csndaqe7cjstl"]
size = Vector2(940, 380)
expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx, depth_prepass_alpha;

uniform sampler2D tex_frg_2 : source_color;
uniform float Metallic = 0.0;
uniform float Roughness = 1.0;
uniform float Specular = 0.0;
uniform sampler2D Generated_T_Grass_01_Normals : hint_normal, filter_linear_mipmap_anisotropic;


// GlobalExpression:0
	//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
	float saturate(float val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 saturate2(vec2 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec3 saturate3(vec3 val)
	{
		return clamp( val, 0.0, 1.0 );
	}
	vec2 mul( mat2 mat, vec2 vector )
	{
		return mat * vector;
	}
	float rcp(float val)
	{
		return 1.0 / val;
	}
	void sincos( float x, out float s, out float c )
	{
		s = sin(x);
		c = cos(x);
	}
	vec2 UnitVectorToOctahedron( vec3 Nparam )
	{
	Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
	if( Nparam.z <= 0.0 )
	{
		vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
	}
	return Nparam.xy;
	}
	vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
	{
	vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	vec3 UAxis = Position - ClosestPointOnAxis;
	vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
	vec3 R = UAxis * CosAngle + VAxis * SinAngle;
	vec3 RotatedPosition = ClosestPointOnAxis + R;
	return RotatedPosition - Position;
	}
	vec3 hash_noise_range_UTG( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
	}
	

void fragment() {
// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, UV);
	float n_out2p4 = n_out2p0.a;


// FloatParameter:5
	float n_out5p0 = Metallic;


// FloatParameter:6
	float n_out6p0 = Roughness;


// FloatParameter:7
	float n_out7p0 = Specular;


// Clamp:20
	float n_in20p1 = 0.00000;
	float n_in20p2 = 1.00000;
	float n_out20p0 = clamp(n_out7p0, n_in20p1, n_in20p2);


	vec3 n_out3p0;
	float n_out3p1;
	float n_out3p2;
	float n_out3p3;
	float n_out3p4;
	vec4 n_out3p5;
// Expression:3
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	n_out3p1 = 0.0;
	n_out3p2 = 0.0;
	n_out3p3 = 0.0;
	n_out3p4 = 0.0;
	n_out3p5 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		//NormalTexture:3(null)
		vec4 Normal3 = texture( Generated_T_Grass_01_Normals, UV );
		Normal3 = Normal3 * vec4(2, 2, 2, 2) - vec4(1, 1, 1, 1);
		n_out3p0 = Normal3.xyz;
		n_out3p1 = Normal3.x;
		n_out3p2 = Normal3.y;
		n_out3p3 = Normal3.z;
		n_out3p3 = Normal3.w;
		n_out3p5 = Normal3;
		
	}


// MultiplyAdd:19
	vec3 n_in19p1 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_in19p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out19p0 = fma(n_out3p0, n_in19p1, n_in19p2);


// FloatConstant:21
	float n_out21p0 = 0.333300;


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out2p4;
	METALLIC = n_out5p0;
	ROUGHNESS = n_out6p0;
	SPECULAR = n_out20p0;
	NORMAL_MAP = n_out19p0;
	ALPHA_SCISSOR_THRESHOLD = n_out21p0;


}
"
graph_offset = Vector2(-523.783, 120.943)
modes/cull = 2
flags/depth_prepass_alpha = true
nodes/vertex/0/position = Vector2(160, 0)
nodes/vertex/22/node = SubResource("VisualShaderNodeGlobalExpression_csndaqe7cjstl")
nodes/vertex/22/position = Vector2(264, 288)
nodes/vertex/22/size = Vector2(940, 380)
nodes/vertex/22/input_ports = ""
nodes/vertex/22/output_ports = ""
nodes/vertex/22/expression = "//Exported with UnrealToGodot : https://www.fab.com/listings/61983625-664c-4308-9b26-edfd58d41002
float saturate(float val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 saturate2(vec2 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec3 saturate3(vec3 val)
{
	return clamp( val, 0.0, 1.0 );
}
vec2 mul( mat2 mat, vec2 vector )
{
	return mat * vector;
}
float rcp(float val)
{
	return 1.0 / val;
}
void sincos( float x, out float s, out float c )
{
	s = sin(x);
	c = cos(x);
}
vec2 UnitVectorToOctahedron( vec3 Nparam )
{
Nparam.xy /= vec2( dot( vec3(1.0,1.0,1.0), abs(Nparam) ), dot( vec3(1.0,1.0,1.0), abs(Nparam) ) );
if( Nparam.z <= 0.0 )
{
	vec2 val = vec2(-1,-1);	if ( Nparam.x >= 0.0 && Nparam.y >= 0.0 ) val = vec2(1,1);	Nparam.xy = ( 1.0 - abs(Nparam.yx) ) * val;
}
return Nparam.xy;
}
vec3 RotateAboutAxis(vec4 NormalizedRotationAxisAndAngle, vec3 PositionOnAxis, vec3 Position)
{
vec3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
vec3 UAxis = Position - ClosestPointOnAxis;
vec3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
float CosAngle;
float SinAngle;
sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle); 
vec3 R = UAxis * CosAngle + VAxis * SinAngle;
vec3 RotatedPosition = ClosestPointOnAxis + R;
return RotatedPosition - Position;
}
vec3 hash_noise_range_UTG( vec3 p ) {
p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
return 2.0 * fract(fract(p)*4375.55) -1.;
}
"
nodes/fragment/0/position = Vector2(160, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_c23v674ffjdka")
nodes/fragment/2/position = Vector2(-300, 0)
nodes/fragment/3/node = SubResource("VisualShaderNodeExpression_c24eiygg33agc")
nodes/fragment/3/position = Vector2(-298, 349)
nodes/fragment/3/size = Vector2(980, 1250)
nodes/fragment/3/input_ports = "0,3,input0;1,0,input1;2,8,input2;"
nodes/fragment/3/output_ports = "0,4,output0;1,0,output1;2,0,output2;3,0,output3;4,0,output4;5,5,output5;"
nodes/fragment/3/expression = "//NormalTexture:3(null)
vec4 Normal3 = texture( input2, UV );
Normal3 = Normal3 * vec4(2, 2, 2, 2) - vec4(1, 1, 1, 1);
output0 = Normal3.xyz;
output1 = Normal3.x;
output2 = Normal3.y;
output3 = Normal3.z;
output3 = Normal3.w;
output5 = Normal3;
"
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture2DParameter_c24eidipoafx0")
nodes/fragment/4/position = Vector2(-1138, 349)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatParameter_bqg5elj5f0d28")
nodes/fragment/5/position = Vector2(-19, 38)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatParameter_bqf6n08busdwi")
nodes/fragment/6/position = Vector2(-19, 230)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatParameter_bqhkcoj61bj2w")
nodes/fragment/7/position = Vector2(-19, 134)
nodes/fragment/19/node = SubResource("VisualShaderNodeMultiplyAdd_dbqdc4krgj0h3")
nodes/fragment/19/position = Vector2(-240, 0)
nodes/fragment/20/node = SubResource("VisualShaderNodeClamp_dnfvlm0c7lp6p")
nodes/fragment/20/position = Vector2(-240, 0)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatConstant_dqoa8qbtma37e")
nodes/fragment/21/position = Vector2(-240, 0)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 5, 0, 0, 2, 6, 0, 0, 3, 7, 0, 20, 0, 3, 0, 19, 0, 4, 0, 3, 2, 2, 4, 0, 1, 19, 0, 0, 9, 20, 0, 0, 4, 21, 0, 0, 19)
